# Copyright (c) 2025, Marco Noce <nce.marco@gmail.com>
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Ensure pip is installed
  ansible.builtin.package:
    name: python3-pip
    state: present

- name: Install openpyxl via pip
  ansible.builtin.pip:
    name: openpyxl
    executable: pip3

- name: Create an initial sample Excel file using Python
  ansible.builtin.shell: |
    python3 - <<'EOF'
    from openpyxl import Workbook
    wb = Workbook()
    ws = wb.active
    # Create header row
    ws['A1'] = 'ID'
    ws['B1'] = 'Name'
    ws['C1'] = 'Value'
    # Create initial data rows
    ws.append([1, 'Alice', 100])
    ws.append([2, 'Bob', 200])
    wb.save("/tmp/test_sample.xlsx")
    EOF
  args:
    executable: /bin/bash

- name: Read the initial Excel file using open_excel (read mode)
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    op: "r"
    index_by_name: true
  register: read_initial

- name: Assert that the initial file has two data rows
  ansible.builtin.assert:
    that:
      - "(read_initial.result['Sheet'] | length) == 2"
    fail_msg: "Expected two data rows in the initial file."

- name: Overwrite cell value in row 2 (update operation)
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    dest: "/tmp/test_sample.xlsx"
    op: "w"
    sheet_name: "Sheet"
    updates_matrix:
      - cell_row: 2
        cell_col: 3
        cell_value: 150
  register: write_result

- name: Read Excel file after update
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    op: "r"
    index_by_name: true
  register: read_after_update

- name: Assert that cell (row 2, column 'Value') is updated to 150
  ansible.builtin.assert:
    that:
      - "read_after_update.result['Sheet'][0]['Value'] == 150"
    fail_msg: "Cell value was not updated as expected."

- name: Append a new row using open_excel (append operation)
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    dest: "/tmp/test_sample.xlsx"
    op: "a"
    sheet_name: "Sheet"
    updates_matrix:
      - cell_col: 1
        cell_value: 3
      - cell_col: 2
        cell_value: "Charlie"
      - cell_col: 3
        cell_value: 300
  register: append_result

- name: Read Excel file after append
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    op: "r"
    index_by_name: true
  register: read_after_append

- name: Assert that a new row for 'Charlie' is appended
  ansible.builtin.assert:
    that:
      - "'Charlie' in (read_after_append.result['Sheet'] | map(attribute='Name') | list)"
    fail_msg: "New row was not appended correctly."

- name: Insert a row above row 2 using open_excel (insert operation)
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    dest: "/tmp/test_sample.xlsx"
    op: "i"
    sheet_name: "Sheet"
    updates_matrix:
      - cell_row: 2
        cell_col: 2
        cell_value: "Inserted"
      - cell_row: 2
        cell_col: 3
        cell_value: 999
  register: insert_result

- name: Read Excel file after insert
  nomakcooper.collection.open_excel:
    src: "/tmp/test_sample.xlsx"
    op: "r"
    index_by_name: true
  register: read_after_insert

- name: Assert that the inserted row is present at the correct position
  ansible.builtin.assert:
    that:
      - "read_after_insert.result['Sheet'][0]['Name'] == 'Inserted'"
      - "read_after_insert.result['Sheet'][0]['Value'] == 999"
    fail_msg: "Row insertion did not occur as expected."

- name: Display final Excel content
  ansible.builtin.debug:
    var: read_after_insert.result