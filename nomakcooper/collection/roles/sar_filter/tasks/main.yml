---
- name: Check role vars
  ansible.builtin.fail:
    msg: "Missing vars! Set 'source', 'filter_by' and 'result_fact'."
  when: source is not defined or filter_by is not defined or result_fact is not defined

- name: Create timestamp list 'date+T+time'
  ansible.builtin.set_fact:
    "{{ result_fact }}_timestamp": "{{ ansible_facts.get(source, []) | map(attribute='date') | zip(ansible_facts.get(source, []) | map(attribute='time')) | map('join', 'T') | list }}"
  when: 
    - filter_by == "timestamp"
    - source != "sar_net"
    - source != "sar_disk"

- name: Create timestamp list date+T+time for net
  ansible.builtin.set_fact:
    "{{ result_fact }}_timestamp": >-
      {{ ansible_facts.get(source, []) | selectattr('IFACE', 'equalto', iface_filter) 
                               | map(attribute='date') 
                               | zip(ansible_facts.get(source, []) | selectattr('IFACE', 'equalto', iface_filter) 
                                                           | map(attribute='time')) 
                               | map('join', 'T') 
                               | list }}
  when: filter_by == "timestamp" and source == "sar_net"

- name: Get IFACE datavalue
  ansible.builtin.set_fact:
    "{{ result_fact }}_values": >-
      {{ ansible_facts.get(source, []) | selectattr('IFACE', 'equalto', iface_filter) 
                               | map(attribute=datavalue_key) 
                               | map('float') 
                               | list }}
  when: filter_by == "datavalue" and source == "sar_net"

- name: Create timestamp list date+T+time for dev
  ansible.builtin.set_fact:
    "{{ result_fact }}_timestamp": >-
      {{ ansible_facts.get(source, []) | selectattr('DEV', 'equalto', dev_filter) 
                               | map(attribute='date') 
                               | zip(ansible_facts.get(source, []) | selectattr('DEV', 'equalto', dev_filter) 
                                                           | map(attribute='time')) 
                               | map('join', 'T') 
                               | list }}
  when: filter_by == "timestamp" and source == "sar_disk"

- name: Get DEV datavalue
  ansible.builtin.set_fact:
    "{{ result_fact }}_values": >-
      {{ ansible_facts.get(source, []) | selectattr('DEV', 'equalto', dev_filter) 
                               | map(attribute=datavalue_key) 
                               | map('float') 
                               | list }}
  when: filter_by == "datavalue" and source == "sar_disk"

- name: Get sar datavalue
  ansible.builtin.set_fact:
    "{{ result_fact }}_values": "{{ ansible_facts.get(source, []) | selectattr(datavalue_key, 'defined') | map(attribute=datavalue_key) | map('float') | list }}"
  when: 
    - filter_by == "datavalue"
    - source != "sar_net"
    - source != "sar_disk"