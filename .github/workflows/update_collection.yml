name: Auto Update Ansible Collection

on:
  workflow_dispatch:

jobs:
  update_collection:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          pip install ansible
          ansible --version

      - name: Fetch latest Python modules
        run: |
          mkdir -p nomakcooper/collection/plugins/modules
          bash nomakcooper/collection/fetch_modules.sh
          git add nomakcooper/collection/plugins/modules/*.py || echo "No files to add"

      - name: Get Versions
        id: versions
        run: |
          # Extract version from galaxy.yml
          LOCAL_VERSION=$(grep 'version:' nomakcooper/collection/galaxy.yml | awk '{print $2}')

          # Get latest published version from Ansible Galaxy
          PUBLISHED_VERSION=$(curl -s https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/index/nomakcooper/collection/ | jq -r '.data[].version' | sort -V | tail -n 1)

          # If PUBLISHED_VERSION is empty, set it to 0.0.0 (to prevent errors)
          if [[ -z "$PUBLISHED_VERSION" ]]; then
            PUBLISHED_VERSION="0.0.0"
          fi

          echo "üîç Local version: $LOCAL_VERSION"
          echo "üåç Published version: $PUBLISHED_VERSION"

          # Store versions in GitHub Actions environment
          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV
          echo "PUBLISHED_VERSION=$PUBLISHED_VERSION" >> $GITHUB_ENV

      - name: Check if Version is Higher
        id: check_version
        run: |
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n 1)" != "$LOCAL_VERSION" ]; then
            echo "‚ö†Ô∏è Local version ($LOCAL_VERSION) is not higher than published version ($PUBLISHED_VERSION). Skipping build and publish."
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Local version is higher. Proceeding with build and publish."
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: Build Ansible Collection
        if: env.SKIP_PUBLISH == 'false'
        run: |
          cd nomakcooper/collection
          ansible-galaxy collection build --force

      - name: Publish to Ansible Galaxy
        if: env.SKIP_PUBLISH == 'false'
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
        run: |
          cd nomakcooper/collection
          echo "üöÄ Publishing version: ${LOCAL_VERSION}"

          if ansible-galaxy collection publish nomakcooper-collection-${LOCAL_VERSION}.tar.gz --api-key $ANSIBLE_GALAXY_API_KEY; then
            echo "‚úÖ Successfully published version ${LOCAL_VERSION}"
          else
            echo "‚ö†Ô∏è Version ${LOCAL_VERSION} already exists, skipping publish."
            exit 0
          fi
