name: Auto Update Ansible Collection

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  update_collection:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          pip install ansible
          ansible --version

      - name: Fetch latest Python modules
        run: |
          mkdir -p nomakcooper/collection/plugins/modules
          bash nomakcooper/collection/fetch_modules.sh
          git add nomakcooper/collection/plugins/modules/*.py || echo "No files to add"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --cached --quiet; then
            echo "No changes detected. Skipping version bump."
            echo "SKIP_VERSION_BUMP=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with version bump."
            echo "SKIP_VERSION_BUMP=false" >> $GITHUB_ENV
          fi

      - name: Ensure Version Bump Before Publishing
        if: env.SKIP_VERSION_BUMP == 'false'
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          # Extract the current version
          VERSION=$(grep 'version:' nomakcooper/collection/galaxy.yml | awk '{print $2}')
          
          # Get the last published version from Ansible Galaxy
          LAST_VERSION=$(curl -s https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/index/nomakcooper/collection/ | jq -r '.data[].version' | sort -V | tail -n 1)

          # If last published version is the same as local version, bump it
          if [[ "$VERSION" == "$LAST_VERSION" ]]; then
            NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
            sed -i "s/version: $VERSION/version: $NEW_VERSION/" nomakcooper/collection/galaxy.yml
            echo "Auto-incremented Ansible collection version to $NEW_VERSION"
            
            git add nomakcooper/collection/galaxy.yml
            git commit -m "Auto-bumped collection version to $NEW_VERSION"
            git push origin main
          else
            echo "Version is already new: $VERSION"
          fi

      - name: Build Ansible Collection
        run: |
          cd nomakcooper/collection
          ansible-galaxy collection build --force

      - name: Publish to Ansible Galaxy
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
        run: |
          cd nomakcooper/collection
          ansible-galaxy collection publish nomakcooper-collection-$(grep 'version:' galaxy.yml | awk '{print $2}').tar.gz --api-key $ANSIBLE_GALAXY_API_KEY